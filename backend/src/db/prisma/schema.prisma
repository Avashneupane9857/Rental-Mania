// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  email          String   @unique
  image          String?
  phoneNum       String?
  profession     String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // user sanga huncha properties ko multiple listings
  listings         Listing[]
  // User ley multiple  reservations garna milcha 
  reservations     Reservation[]
  // User ley multiple reviews dina milcha 
  reviews          Review[]
  // User ley fav garna milcha properties lai 
  favoriteListings Listing[]     @relation("FavoriteListings")
}

model Listing {
  id            String   @id @default(cuid())
  title         String
  description   String
  imageSrc      String[]
  createdAt     DateTime @default(now())
  category      String
  roomCount     Int
  bathroomCount Int
  guestCount    Int
  price         Float

  // Location coordinates exact location produce garna lai   
  latitude  Float?
  longitude Float?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) //yo id ko user ley aafnio id delete gareypachi sabai data will be deleted 

  // Reservations for this listing yo property ko lai 
  reservations Reservation[]
  // Reviews for this property
  reviews      Review[]
  // Users who favorited yo property
  favoritedBy  User[]        @relation("FavoriteListings")

  @@index([userId])
}

model Reservation {
  id         String   @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  createdAt  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([listingId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  // Relationship with User (jasley review dincha )
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relationship with Listing
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([listingId])
}

//enum for category
